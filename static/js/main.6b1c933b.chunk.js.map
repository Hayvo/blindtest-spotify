{"version":3,"sources":["App.js","registerServiceWorker.js","index.js","logo.svg","loading.svg"],"names":["getRandomNumber","x","Math","floor","random","AlbumCover","props","src","track","album","images","url","style","width","height","DisplayButtons","data","array","counter","length","index","temp","shuffleArray","console","log","map","item","onClick","checkAnswer","currentTrack","name","swal","App","useState","setTracks","numberTracks","setNumberTracks","songLoaded","setSongLoaded","setCurrentTrack","track2","setTrack2","track3","setTrack3","previewUrl","setPreviewUrl","useEffect","fetch","method","headers","Authorization","then","response","json","items","i","preview_url","className","logo","alt","playStatus","Sound","status","PLAYING","loading","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.6b1c933b.chunk.js","sourcesContent":["/*global swal*/\r\n\r\nimport React, { useEffect } from 'react';\r\nimport logo from './logo.svg';\r\nimport loading from './loading.svg';\r\nimport './App.css';\r\nimport Sound from 'react-sound';\r\nimport Button from './Button';\r\nimport { useState } from 'react';\r\nimport { shallowEqual } from '@babel/types';\r\n\r\nconst apiToken = 'BQBQKhMw45h8hhh60EvlZKJZkjhvK2u8wnGJXU3juBP09wIy7GvS4k2-eqdYd-WquJgBPmV00FuXaP8rRimCv0ifyClRI8jAsxvE3lDf42aPkCN5q7dVvpoSFm2m83u2SDzXviLZqxmvUbAGQ2am7U9_napmHSVUo0T7wP7AaPFIfVQ2'\r\n\r\nfunction shuffleArray(array) {\r\n  let counter = array.length;\r\n\r\n  while (counter > 0) {\r\n    let index = getRandomNumber(counter);\r\n    counter--;\r\n    let temp = array[counter];\r\n    array[counter] = array[index];\r\n    array[index] = temp;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\n/* Return a random number between 0 included and x excluded */\r\nfunction getRandomNumber(x) {\r\n  return Math.floor(Math.random() * x);\r\n}\r\n\r\nconst AlbumCover = (props) =>  {\r\n  const src = props.track.track.album.images[0].url; // A changer ;)\r\n  return (\r\n      <img src={src} style={{ width: 400, height: 400 }} />\r\n  );\r\n};\r\n\r\nconst DisplayButtons = (props) => {\r\n  const data = shuffleArray(props.array);\r\n  console.log(data);\r\n  return (\r\n    data.map( item => \r\n\r\n      <button onClick = {() => checkAnswer([props.currentTrack.track.name,item.track.name])}>{item.track.name}</button>)\r\n  );\r\n}\r\n\r\nconst checkAnswer = (props) => {\r\n  if(props[0] == props[1]){\r\n    swal('Bravo');\r\n    App();\r\n  }\r\n  else{\r\n    swal(\"C'est faux grosse merde\");\r\n  }\r\n};\r\n\r\nconst App = () => {\r\n\r\n  const [tracks, setTracks] = useState();\r\n  const [text, setText] = useState('');\r\n  const [numberTracks, setNumberTracks] = useState(0);\r\n  const [songLoaded, setSongLoaded] = useState(false);\r\n  const [currentTrack, setCurrentTrack] = useState();\r\n  const [track2, setTrack2] = useState();\r\n  const [track3, setTrack3] = useState();\r\n  const [previewUrl , setPreviewUrl] = useState();\r\n  const [trackArray, setTrackArray] = useState();\r\n  \r\n\r\n\r\n\r\n  useEffect(() => {fetch('https://api.spotify.com/v1/me/tracks', {\r\n    method: 'GET',\r\n    headers: {\r\n     Authorization: 'Bearer ' + apiToken,\r\n    },\r\n  })\r\n    .then(response => response.json())\r\n    .then((data) => {\r\n      console.log(\"Réponse reçue ! Voilà ce que j'ai reçu : \", data);\r\n      setTracks(data.items);\r\n      setNumberTracks(data.items.length);\r\n      setTrack2(data.items[getRandomNumber(data.items.length)])\r\n      setTrack3(data.items[getRandomNumber(data.items.length)])\r\n      const i = getRandomNumber(data.items.length);\r\n      setCurrentTrack(data.items[i])\r\n      setPreviewUrl(data.items[i].track.preview_url);\r\n      setSongLoaded(true);\r\n      \r\n    })},[]);\r\n\r\n    \r\n  \r\n  \r\n\r\n  if (songLoaded){\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n          <h1 className=\"App-title\">Bienvenue sur le Blindtest</h1>\r\n        </header>\r\n        <div className=\"App-images\">\r\n          <p>{numberTracks} chansons ont été chargées</p>\r\n          <p> Current track : {currentTrack.track.name}</p>\r\n          <AlbumCover track={currentTrack}></AlbumCover>\r\n          <Sound url={previewUrl} playStatus={Sound.status.PLAYING}/>\r\n          \r\n        </div>  \r\n        <div className=\"App-buttons\">\r\n          <DisplayButtons array = {[track2,track3,currentTrack]} currentTrack = {currentTrack} ></DisplayButtons>\r\n        </div>\r\n      </div>\r\n    ); \r\n  }\r\n  else{\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n          <h1 className=\"App-title\">Bienvenue sur le Blindtest</h1>\r\n        </header>\r\n        <div className=\"App-images\">\r\n        <img src={loading} className=\"App-logo\" alt=\"logo\"/>\r\n        </div>\r\n        <div className=\"App-buttons\">\r\n        </div>\r\n      </div>\r\n    ); \r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.6a581294.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.ed34bc26.svg\";"],"sourceRoot":""}